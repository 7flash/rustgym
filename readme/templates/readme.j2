# [RUST GYM](http://rustgym.com) Rust Solutions [![Docs Status](https://docs.rs/rustgym/badge.svg)](https://docs.rs/rustgym) [![Rust](https://github.com/warycat/rustgym/workflows/Rust/badge.svg)](https://github.com/warycat/rustgym/actions)

## [Leetcode Solutions in Rust](#leetcode)
## [AdventOfCode Solutions in Rust](#adventofcode)

This project demostrates how to create **Data Structures** and to implement **Algorithms** using programming language **Rust**
All the solutions here are crafted with love and their performance beats 99% of other solutions on the leetcode website. Tutorial videos will be added later.

### Please subscribe to our [RUST GYM Youtube Channel](https://www.youtube.com/channel/UCV9HzRLPKjI8SttaIYOygsw) for future videos.

<details><summary>Data Structures</summary>

- Stack & Queue ( Vec, VecDeque )
- Linked List ( Option<Box<ListNode>> )
- Hash Tables ( HashMap, HashSet )
- Tree Tables ( BTreeMap, BTreeSet )
- Binary Search Tree ( Option<Rc<RefCell<TreeNode>>> )
- Binary Heaps & Priority Queue ( BinaryHeap )
- Graphs ( Vec<Vec<usize>> )
- Union Find ( UnionFind )
- Trie ( Trie )
</details>

<details><summary>Algorithms</summary>

- Bit Manipulation & Numbers
- Stability in Sorting
- Heapsort
- Binary Search
- Kth Smallest Elements
- Permutations
- Subsets
- BFS Graph
- DFS Graph
- Dijkstraâ€™s Algorithm
- Tree Traversals
    - BFS
    - DFS
        - in-order
        - pre-order
        - post-order
- Topological Sort
- Detect cycle in an undirected graph
- Detect a cycle in a directed graph
- Count connected components in a graph
- Find strongly connected components in a graph
</details>

<table id="leetcode" class="table-auto">
  <thead>
    <tr>
      <th>id</th>
      <th>Leetcode</th>
      <th>Level</th>
    </tr>
  </thead>
  <tbody>
    {%- for question in leetcode_questions %}
      <tr>
        <td>
          {{question.id}}
        </td>
        <td>
          <a href="http://rustgym.com/leetcode/{{question.id}}"> {{question.title}}</a>
        </td>
        <td>
          {%- if question.level == 1 -%}
            Easy
          {%- else if question.level == 2 -%}
            Medium
          {%- else if question.level == 3 -%}
            Hard
          {%- endif -%}
        </td>
      </tr>
    {%- endfor -%}
  </tbody>
</table>

<table id="adventofcode" class="table-auto">
  <thead>
    <tr>
      <th>Year</th>
      <th>Day</th>
      <th>AdventOfCode</th>
    </tr>
  </thead>
  <tbody>
    {%- for row in adventofcode_descriptions %}
      <tr>
        <td>
          {{row.year}}
        </td>
        <td>
          Day{{row.day}}
        </td>
        <td>
          <a href="http://rustgym.com/adventofcode/{{row.id}}"> {{row.title}}</a>
        </td>
      </tr>
    {%- endfor -%}
  </tbody>
</table>
